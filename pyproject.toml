[build-system]
requires = ["poetry-core>=1.8.3"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "Miolingo"
version = "0.0.1"
description = "A language-learning app to suit your needs"
authors = ["Yannick Chabbert <yannick.chabbert.it@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.111.0"
fastapi-users = "^13.0.0"
fastapi-users-db-sqlalchemy = "^6.0.1"
fastapi-mail = "^1.4.1"
pydantic = "^2.8.2"
pydantic-settings = "^2.3.4"
asyncpg = "^0.29.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.31"}
alembic = "^1.13.2"

[tool.poetry.group.test.dependencies]
tox = "^4.16.0"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-reverse = "^1.7.0"
pytest-dotenv = "^0.5.2"
polyfactory = "^2.16.2"
beautifulsoup4 = "^4.12.3"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.1"
black = "^24.4.2"
isort = "^5.12.0"
ruff = "^0.5.0"
mypy = "^1.10.1"
pydantic = {extras = ["dotenv"], version = "^2.8.2"}

[tool.poetry.group.prod.dependencies]
uvicorn = {extras = ["standard"], version = "^0.30.1"}

[tool.black]
line-length = 119
target-version = ["py312"]
extend-exclude = ""

[tool.isort]
profile = "black"
skip = ""
sections = "FUTURE,STDLIB,FRAMEWORK,THIRDPARTY,FIRSTPARTY,TESTS,LOCALFOLDER"
known_framework = "fastapi,fastapi_users,fastapi_users_db_sqlalchemy,pydantic,pydantic_core,pydantic_settings,sqlalchemy,alembic"
known_first_party = "miolingo"
known_tests = "tests"

[tool.ruff]
line-length = 119

[tool.mypy]
plugins = "pydantic.mypy"
exclude = "alembic"
ignore_missing_imports = true
disallow_untyped_defs = true
show_error_codes = true

[tool.mypy-tests]
disallow_untyped_defs = false
disable_error_code = "annotation-unchecked, index, union-attr"

[tool.pytest.ini_options]
addopts = "-ra -q"
testpaths = [
    "tests",
]
env_files = [
    ".env.test",
    ".env",
]

[tool.coverage.run]
source = [
    "miolingo",
    "tests",
]
branch = true
omit = []

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "def __str__",
    "def __repr__",
]
